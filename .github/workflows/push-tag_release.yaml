name: Push Tag - Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Tag version to release'
        required: true

permissions:
  contents: write
  packages: write

env:
  CTNR_VERSION: ${{ github.event.inputs.version }}
  CTNR_API_URL: https://api.ctnr.io
  SUPABASE_URL: ${{ vars.SUPABASE_URL }}
  SUPABASE_ANON_KEY: ${{ vars.SUPABASE_ANON_KEY }}

  EXPO_PUBLIC_CTNR_VERSION: ${{ github.event.inputs.version }}
  EXPO_PUBLIC_CTNR_API_URL: https://api.ctnr.io
  EXPO_PUBLIC_SUPABASE_URL: ${{ vars.SUPABASE_URL }}
  EXPO_PUBLIC_SUPABASE_ANON_KEY: ${{ vars.SUPABASE_ANON_KEY }}

jobs:
  build-cli:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - x86_64-apple-darwin
          - aarch64-apple-darwin
          - x86_64-pc-windows-msvc
        include:
          - target: x86_64-unknown-linux-gnu
            os: linux
            arch: x64
            ext: ''
          - target: aarch64-unknown-linux-gnu
            os: linux
            arch: arm64
            ext: ''
          - target: x86_64-apple-darwin
            os: darwin
            arch: x64
            ext: ''
          - target: aarch64-apple-darwin
            os: darwin
            arch: arm64
            ext: ''
          - target: x86_64-pc-windows-msvc
            os: windows
            arch: x64
            ext: '.exe'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: latest

      - name: Get Version
        id: version
        run: |
          # If workflow is triggered by a tag, use the tag name
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
            echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "Tag version detected: ${{ github.ref_name }}"
          else
            # Ensure the tag with the version exists
            echo "Checking for tag with version ${{ github.event.inputs.version }}"
            if [[ -z "${{ github.event.inputs.version }}" ]]; then
              echo "No version input provided."
              exit 1
            else
              echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
              echo "Using version from input: ${{ github.event.inputs.version }}"
            fi
          fi

      - name: Compile cli binary
        run: |
          mkdir -p dist

          # Set environment variables for compilation

          curl -sfS https://dotenvx.sh/install.sh | sh

          # Compile the CLI with embedded environment variables
          deno task compile \
            --target ${{ matrix.target }} \
            --output dist/ctnr-cli-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }} \
            cli/static_main.ts

      - name: Create tarball (Unix)
        if: matrix.os != 'windows'
        run: |
          cd dist
          tar -czf ctnr-cli-${{ steps.version.outputs.version }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz ctnr-cli-${{ matrix.os }}-${{ matrix.arch }}

      - name: Create zip (Windows)
        if: matrix.os == 'windows'
        run: |
          cd dist
          zip ctnr-cli-${{ steps.version.outputs.version }}-${{ matrix.os }}-${{ matrix.arch }}.zip ctnr-cli-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ctnr-cli-${{ matrix.os }}-${{ matrix.arch }}
          if-no-files-found: error
          path: |
            dist/ctnr-cli-${{ steps.version.outputs.version }}-${{ matrix.os }}-${{ matrix.arch }}.*

  build-app:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Get Version
        id: version
        run: |
          # If workflow is triggered by a tag, use the tag name
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
            echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "Tag version detected: ${{ github.ref_name }}"
          else
            # Ensure the tag with the version exists
            echo "Checking for tag with version ${{ github.event.inputs.version }}"
            if [[ -z "${{ github.event.inputs.version }}" ]]; then
              echo "No version input provided."
              exit 1
            else
              echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
              echo "Using version from input: ${{ github.event.inputs.version }}"
            fi
          fi

      - name: Build app
        run: |
         cd app

          # Install dependencies
          bun install

          # Build the app
          bunx expo export --platform web

      - name: Create tarball (Unix)
        run: |
          cd app
          tar -czf ctnr-app-${{ steps.version.outputs.version }}.tar.gz dist

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ctnr-app
          if-no-files-found: error
          path: |
            app/ctnr-app-${{ steps.version.outputs.version }}.*
          
  release-all:
    needs: [build-cli, build-app]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Version
        id: version
        run: |
          # If workflow is triggered by a tag, use the tag name
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
            echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "Tag version detected: ${{ github.ref_name }}"
          else
            # Ensure the tag with the version exists
            echo "Checking for tag with version ${{ github.event.inputs.version }}"
            if [[ -z "${{ github.event.inputs.version }}" ]]; then
              echo "No version input provided."
              exit 1
            else
              echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
              echo "Using version from input: ${{ github.event.inputs.version }}"
            fi
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Prepare release assets
        run: |
          # Flatten the artifact structure
          find dist -name "*.tar.gz" -o -name "*.zip" | while read file; do
            mv "$file" ./
          done

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v2.3.2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            *.tar.gz
            *.zip
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
